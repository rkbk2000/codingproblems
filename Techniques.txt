1. Find if a range is present in a sorted array:
An array containing positive elements is given. ‘A’ and ‘B’ are two numbers defining a range. Write a function to check if the array contains all elements in the given range.

https://www.geeksforgeeks.org/check-if-an-array-contains-all-elements-of-a-given-range/
Method 1 : (Intuitive) 
The most intuitive approach is to sort the array and check from the element greater than ‘A’ to the element greater than ‘B’. If these elements are in continuous order, all elements in the range exists in the array.
Time complexity: O(n log n) 
Auxiliary space: O(1)
Method 2 : (Hashing) 
We can maintain a count array or a hash table that stores the count of all numbers in the array that are in the range A…B. Then we can simply check if every number occurred at least once.
Time complexity : O(n) 
Auxiliary space : O(max_element)
Method 3 : (Best) 
Do a linear traversal of the array. If an element is found such that |arr[i]| >= A and |arr[i]| 

2. Dynamic programming
https://www.geeksforgeeks.org/longest-monotonically-increasing-subsequence-size-n-log-n/

3. Breadth First Search and Backtracking
https://leetcode.com/problems/word-ladder-ii/solution/

4. Solution Pattern for Permutations / Combinations / Subsets
First, their solution space is often quite large:
Permutations: N!

Combinations: C(k,N) = N!/((N−k)!k!)
​Subsets: 2^N  , since each element could be absent or present.

Given their exponential solution space, it is tricky to ensure that the generated solutions are complete and non-redundant. It is essential to have a clear and easy-to-reason strategy.

There are generally three strategies to do it:

Recursion
Backtracking
Lexicographic generation based on the mapping between binary bitmasks and the corresponding permutations / combinations / subsets.

As one would see later, the third method could be a good candidate for the interview because it simplifies the problem to the generation of binary numbers, therefore it is easy to implement and verify that no solution is missing.

Besides, this method has the best time complexity, and as a bonus, it generates lexicographically sorted output for the sorted inputs.