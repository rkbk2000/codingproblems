// 28/36 passed:
// Input:
// [908,103,17,374,839,318,208,50,697,393,315,799,208,675,499,120,625,997,992,115,189,324,150,331,31,284,587,593,570,512,45,794,452,185,954,474,872,534,16,189,331,844,756,661,72,455,882,2,927,918,289,19,766,732,887,368,998,100,51,653,372,284,97,396,137,535,197,549,132,640,932,636,306,134,578,66,789,493,931,337,626,118,623,762,42,305,997,592,34,297,812,698,62,416,522,713,352,139,644,877,190,151,165,290,757,697,224,191,906,390,158,497,422,491,100,629,782,901,567,88,571,145,308,412,829,805,178,786,754,405,663,156,409,505,469,335,664,497,986,134,562,80,228,768,577,918,722,996,12,663,578,729,577,299,442,632,767,614,376,364,900,595,574,772,941,147,208,782,90,640,344,212,152,698,869,855,946,954,28,138,451,698,803,961,77,735,340,316,899,333,653,177,232,914,88,456,981,612,777,569,481,191,802,779,389,356,75,286,389,464,975,353,997,104,103,39,158,815,294,451,65,517,563,724,838,854,919,392,945,798,781,110,678,513,51,462,26,311,764,517,330,752,908,316,493,830,826,127,915,969,65,496,256,490,951,132,60,993,126,514,773,838,23,828,805,80,783,629,81,422,271,345,533,351,497,393,709,812,968,557,501,389,791,710,576,760,593,238,683,40,198,961,380,831,956,753,936,92,39,247,692,399,935,652,929,14,660,137,961,364,308,454,132,264,412,887,581,119,660,178,182,568,405,982,864,459,632,179,460,72,814,672,13,2,160,584,147,854,517,8,856,348,488,810,5,602,505,316,130,156,429,185,686,650,912,965,795,171,156,119,688,762,563,601,698,774,833,824,315,463,690,193,452,616,793,986,35,30,393,754,171,136,100,942,98,179,596,463,733,72,117,984,858,398,693,372,214,678,444,409,3,512,125,688,597,733,879,58,643,920,359,862,536,28,815,410,537,31,539,333,187,896,305,483,364,772,127,462,769,671,978,86,930]
// [ 567, 66, 79, 965, 224, 834, 143, 80, 21, 846, 986, 565, 610, 962, 946, 829, 127, 319, 436, 648, 732, 117, 125, 504, 80, 725, 801, 323, 328, 414, 557, 739, 958, 828, 509, 695, 502, 555, 101, 706, 154, 35, 479, 587, 811, 799, 804, 959, 728, 439, 644, 542, 106, 54, 159, 42, 956, 866, 490, 251, 237, 191, 313, 705, 490, 11, 572, 476, 118, 787, 185, 101, 551, 788, 536, 558, 594, 867, 114, 313, 154, 758, 579, 235, 655, 387, 339, 398, 570, 166, 660, 361, 200, 737, 513, 675, 59, 148, 920, 774, 746, 105, 947, 267, 646, 196, 472, 174, 744, 891, 796, 269, 59, 470, 385, 936, 317, 893, 13, 130, 188, 918, 14, 862, 567, 714, 654, 843, 570, 417, 109, 585, 259, 715, 395, 850, 326, 913, 543, 254, 713, 377, 483, 469, 947, 772, 67, 100, 352, 187, 35, 725, 855, 664, 771, 158, 52, 441, 343, 432, 732, 398, 772, 1000, 691, 751, 481, 426, 419, 930, 930, 379, 995, 847, 627, 991, 490, 907, 312, 641, 88, 113, 141, 389, 522, 922, 444, 431, 457, 510, 995, 68, 943, 562, 756, 705, 428, 628, 574, 24, 442, 344, 321, 45, 654, 206, 493, 375, 928, 166, 955, 762, 103, 1000, 265, 365, 25, 990, 412, 73, 839, 737, 563, 399, 673, 423, 409, 27, 200, 203, 976, 358, 244, 350, 897, 92, 196, 542, 599, 272, 374, 598, 892, 887, 549, 687, 551, 904, 50, 334, 448, 603, 207, 119, 689, 346, 426, 781, 761, 580, 822, 347, 166, 521, 959, 905, 574, 966, 699, 362, 23, 745, 392, 359, 736, 137, 969, 277, 842, 834, 177, 963, 606, 811, 871, 702, 801, 389, 485, 923, 459, 846, 32, 609, 747, 981, 607, 767, 831, 240, 904, 702, 334, 534, 74, 603, 228, 684, 718, 427, 567, 457, 690, 563, 359, 233, 131, 703, 20, 342, 74, 863, 141, 808, 428, 83, 622, 552, 214, 9, 698, 445, 214, 399, 140, 648, 121, 257, 692, 304, 713, 541, 790, 310, 604, 449, 948, 248, 905, 680, 441, 863, 132, 528, 108, 576, 109, 318, 50, 469, 340, 139, 971, 194, 528, 808, 107, 396, 717, 511, 627, 246, 920, 469, 959, 579, 932, 336, 478, 164, 566, 17, 852, 131, 160, 387, 66, 917, 376, 593, 31, 934, 598, 283, 448, 998, 293, 513, 252, 212, 725, 868, 246, 720, 922, 259, 180, 502, 698, 438, 463, 728, 810, 219, 487, 54, 106, 816, 924, 287, 201, 184, 757, 897, 601, 258, 620, 124, 701, 777, 688, 28, 568, 561, 766, 900, 432, 476, 244, 101, 256, 549, 375, 246, 265, 898, 13, 764, 399, 428, 434, 603, 269, 69, 710, 674, 759, 42, 374, 450, 926, 720, 235, 595, 297, 606, 362, 666, 313, 745, 571, 57, 366, 242, 757, 512, 287, 908, 316, 323, 238, 454, 955, 980, 889, 490, 67, 515, 672, 134, 757, 466, 563, 243, 944, 130, 315, 722, 790, 157, 474, 941, 950, 957, 783, 31, 831, 353, 763, 250, 823, 782, 766, 844, 637, 16, 811, 907, 363, 233, 60, 425, 814, 159, 508, 37, 805, 739, 743, 12, 249, 461, 143, 571, 39, 833, 467, 393, 232, 416, 81, 136, 831, 450, 937, 322, 262, 353, 931, 85, 701, 995, 215, 360, 675, 335, 886, 579, 745, 64, 215, 798, 851, 802, 401, 500, 151, 293, 163, 17, 377, 304, 640, 663, 217, 771, 546, 471, 430, 809, 747, 983, 150, 525, 639, 225, 325, 24, 471, 195, 216, 601, 754, 330, 357, 379, 961, 309, 811, 156, 650, 905, 806, 19, 986, 979, 734, 112, 942, 552, 530, 255, 912, 699, 35, 738, 779, 557, 492, 998, 85, 698, 267, 407, 206, 674, 960, 882, 610, 535, 434, 524, 500, 195, 198, 549, 286, 807, 169, 86, 441, 253, 954, 70, 703, 616, 623, 355, 536, 598, 857, 169, 526, 815, 307, 45, 732, 365, 457, 174, 80, 770, 483, 390, 958, 960, 208, 675, 536, 803, 635, 21, 319, 502, 835, 344, 503, 270, 258, 285, 419, 501, 749, 476, 223, 356, 736, 730, 848, 712, 55, 146, 447, 627, 438, 119, 588, 96, 13, 141, 376, 453, 324, 967, 966, 100 ]

// Last two are extra entries
// Output:
// [47,333,400,344,339,148,332,305,38,2,51,262,236,178,413,377,24,417,88,376,215,298,289,84,30,7,58,234,407,38,256,92,220,250,75,44,329,389,206,184,141,265,268,431,119,194,168,297,62,384,57,114,382,1,214,213,231,19,390,81,317,359,15,402,258,247,426,333,348,68,255,312,73,139,381,64,265,247,307,179,97,400,121,165,336,22,101,305,172,131,349,358,110,216,334,102,357,213,380,191,126,319,327,385,30,320,33,1,351,420,20,39,100,107,201,371,66,290,6,12,166,171,396,106,142,192,287,299,252,313,270,6,25,61,207,50,396,103,298,206,218,89,153,24,85,422,72,289,122,332,310,237,10,368,187,357,243,347,382,5,21,240,23,40,189,419,135,79,186,170,271,100,312,341,273,96,211,205,410,159,309,424,55,60,395,310,348,3,158,292,204,208,307,281,141,109,227,9,275,378,63,393,301,129,322,132,319,399,243,415,123,314,93,214,72,112,269,350,154,398,180,219,32,378,372,311,45,195,339,325,328,235,427,369,97,387,209,134,35,270,200,269,423,342,253,213,113,289,129,12,77,244,359,251,195,255,131,111,137,208,274,14,280,133,346,29,401,233,309,259,221,239,338,94,272,37,65,412,416,418,67,1,279,140,222,362,118,321,199,28,120,162,110,398,424,221,284,317,129,144,152,320,74,150,316,335,26,87,166,27,81,286,161,357,386,93,404,363,165,345,197,157,373,55,110,82,16,387,80,115,267,155,326,71,69,169,332,417,165,115,408,98,353,303,59,190,306,318,43,130,234,149,136,429,331,13,407,232,397,288,352,360,403,370,300,394,8,105,91,173,385,181,251,364,276,15,415,283,316,95,39,146,223,151,53,388,405,185,241,295,128,25,179,206,197,379,42,104,146,285,83,361,238,52,156,143,428,163,82,397,425,132,37,260,365,198,203,230,116,167,266,128,127,76,282,101,374,31,339,280,356,229,325,66,209,11,202,182,125,264,343,90,277,38,330,217,414,404,367,246,263,124,358,405,88,245,293,332,67,359,229,414,396,373,331,407,366,224,261,198,4,41,22,8,69,225,427,337,175,72,340,392,411,324,136,305,174,36,384,99,410,406,46,54,315,421,188,160,117,332,201,382,122,360,108,0,242,354,193,248,49,270,145,226,151,409,48,304,89,432,78,268,405,301,203,70,302,84,41,207,296,409,164,383,26,228,0,176,329,144,264,207,80,333,75,393,313,326,390,93,100,95,53,31,258,412,174,370,254,240,34,177,70,294,183,291,308,47,355,278,249,210,60,26,430,196,262,323,33,391,112,78,399,107,12,369,428,256,186,235,278,5,389,114,417,79,318,138,347,375,18,255,257,147,17,128,86,334,14,212,381,256,24,285,200,56,181,3,266,264,236,378,147,73,240,153,227,99,421,431,348,154,259,64,93,45,94,74,426,260,63,115,158,135,311,238,200,146,303,332,172,121,345,338,143,211,376,265,386,232,164,206,321,207,298,131,301,125,101,38,42,142,57,343,396,252,77,319,292,352,395,167,236,330,211,142,283,8,6,135,308,340,334,358,260,44,355,399,71,27,54,336,184,71,120,30,7,349]

// Expected:
// [47,333,400,344,339,148,332,305,38,2,51,262,236,178,413,377,24,417,88,376,215,298,289,84,30,7,58,234,407,38,256,92,220,250,75,44,329,389,206,184,141,265,268,431,119,194,168,297,62,384,57,114,382,1,214,213,231,19,390,81,317,359,15,402,258,247,426,333,348,68,255,312,73,139,381,64,265,247,307,179,97,400,121,165,336,22,101,305,172,131,349,358,110,216,334,102,357,213,380,191,126,319,327,385,30,320,33,1,351,420,20,39,100,107,201,371,66,290,6,12,166,171,396,106,142,192,287,299,252,313,270,6,25,61,207,50,396,103,298,206,218,89,153,24,85,422,72,289,122,332,310,237,10,368,187,357,243,347,382,5,21,240,23,40,189,419,135,79,186,170,271,100,312,341,273,96,211,205,410,159,309,424,55,60,395,310,348,3,158,292,204,208,307,281,141,109,227,9,275,378,63,393,301,129,322,132,319,399,243,415,123,314,93,214,72,112,269,350,154,398,180,219,32,378,372,311,45,195,339,325,328,235,427,369,97,387,209,134,35,270,200,269,423,342,253,213,113,289,129,12,77,244,359,251,195,255,131,111,137,208,274,14,280,133,346,29,401,233,309,259,221,239,338,94,272,37,65,412,416,418,67,1,279,140,222,362,118,321,199,28,120,162,110,398,424,221,284,317,129,144,152,320,74,150,316,335,26,87,166,27,81,286,161,357,386,93,404,363,165,345,197,157,373,55,110,82,16,387,80,115,267,155,326,71,69,169,332,417,165,115,408,98,353,303,59,190,306,318,43,130,234,149,136,429,331,13,407,232,397,288,352,360,403,370,300,394,8,105,91,173,385,181,251,364,276,15,415,283,316,95,39,146,223,151,53,388,405,185,241,295,128,25,179,206,197,379,42,104,146,285,83,361,238,52,156,143,428,163,82,397,425,132,37,260,365,198,203,230,116,167,266,128,127,76,282,101,374,31,339,280,356,229,325,66,209,11,202,182,125,264,343,90,277,38,330,217,414,404,367,246,263,124,358,405,88,245,293,332,67,359,229,414,396,373,331,407,366,224,261,198,4,41,22,8,69,225,427,337,175,72,340,392,411,324,136,305,174,36,384,99,410,406,46,54,315,421,188,160,117,332,201,382,122,360,108,0,242,354,193,248,49,270,145,226,151,409,48,304,89,432,78,268,405,301,203,70,302,84,41,207,296,409,164,383,26,228,0,176,329,144,264,207,80,333,75,393,313,326,390,93,100,95,53,31,258,412,174,370,254,240,34,177,70,294,183,291,308,47,355,278,249,210,60,26,430,196,262,323,33,391,112,78,399,107,12,369,428,256,186,235,278,5,389,114,417,79,318,138,347,375,18,255,257,147,17,128,86,334,14,212,381,256,24,285,200,56,181,3,266,264,236,378,147,73,240,153,227,99,421,431,348,154,259,64,93,45,94,74,426,260,63,115,158,135,311,238,200,146,303,332,172,121,345,338,143,211,376,265,386,232,164,206,321,207,298,131,301,125,101,38,42,142,57,343,396,252,77,319,292,352,395,167,236,330,211,142,283,8,6,135,308,340,334,358,260,44,355,399,71,27,54,336,184,71,120,30]

// TLE 32/36 passed
// [1,2,3,4,5,6,7,8,9,10]
// [900000 - 99999]
// TODO: Convert busyservers as well into a priority_queue of lowest finish time to largest
// Passing Example  tests
// Input:
// [ 3, 3, 2 ]
//     [1, 2, 3, 2, 1, 2]
//     [5, 1, 4, 3, 2]
//     [2, 1, 2, 4, 5, 2, 1]
// Output:
// [2,2,0,2,1,2]
// [1, 4, 1, 4, 1, 3, 2]

// https://leetcode.com/problems/process-tasks-using-servers/

// Fix the order issue - multi map keys are not ordered, need to check before insertion
// IF same value comes for the key lower index needs to be added first
// Use eq_range and select lowest value key

// TODO: Not all test cases are passing, fix
// try to use a priority queue for available serers
// Use greater <>
#include <vector>
#include <queue>
#include <map>

using namespace std;

class Solution
{
public:
   struct server_type
   {
      size_t index;
      int weight;

      bool operator()(const server_type &lhs, const server_type &rhs) const
      {
         // If both are same return the one with larger index
         if (lhs.weight == rhs.weight)
         {
            return lhs.index > rhs.index;
         }

         //Return the one with larger weight
         return lhs.weight > rhs.weight;
      }
   };

   vector<int> assignTasks(vector<int> &servers, vector<int> &tasks)
   {
      std::priority_queue<server_type, std::vector<server_type>, server_type> freeServers;
      // Create a map of freeServers - Weight vs Index
      for (size_t idx = 0; idx < servers.size(); ++idx)
      {
         freeServers.emplace(server_type{idx, servers[idx]});
      }

      auto maxTasks = tasks.size();
      auto result = vector<int>(maxTasks);

      // Next available time vs list of servers
      map<size_t, vector<size_t>> busyServers;

      size_t taskIdx = 0, // Index of the task to be taken next, increment only if it is assigned to a server
          curTime = 0;    // curTime gets incremented by 1 second every iteration

      while (taskIdx < maxTasks)
      {
          // Jump to next available second
          if (freeServers.empty() && !busyServers.empty()) {
              curTime =  busyServers.begin()->first;
          }
          
         // Remove the completed task(s)
         auto iter = busyServers.find(curTime);
         if (iter != busyServers.end())
         {
            for (auto &val : iter->second)
            {
               freeServers.emplace(server_type{val, servers[val]});
            }
            busyServers.erase(iter);
         }
          
         // for (auto idx = taskIdx; idx <= curTime; ++idx)
         while (taskIdx <= curTime)
         {
            if (freeServers.empty() || taskIdx >= maxTasks)
            {
               // No free server is available to serve this task
               break;
            }

            // First element will always be having lowest weight or lowest index if weights are same.
            auto server = freeServers.top();
            auto nextAvail = curTime + tasks[taskIdx];
            busyServers[nextAvail].push_back(server.index);
            freeServers.pop();
            result[taskIdx] = server.index;
            ++taskIdx;
         }
         ++curTime;
      }
      return result;
   }
};